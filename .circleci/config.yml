version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflowId:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-arshan-bucket --recursive
            aws cloudformation delete-stack \
              --stack-name "frontend-stack-<< parameters.workflowId >>"
            aws cloudformation delete-stack \
              --stack-name "backend-stack-<< parameters.workflowId >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here  
      workflowId:
        type: string            
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: migration_<< parameters.workflowId >>" --request GET https://api.memstash.io/values/migration_<< parameters.workflowId >>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            #  Add revert code here. You can find this in the Getting Started section.
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end test
          command: |
            cd frontend
            npm i
            npm run test 
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
          # Your job code here
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end audit
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical 
                

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: back-end audit
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical 
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:2.0.6
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: save backend url to memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filter "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].[PublicIpAddress]" \
              --output text)
            echo $BACKEND_IP
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID})
            echo $BACKEND_IP
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run: yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        # Checkout code from git
        - checkout
        # Add ssh keys with fingerprint
        - add_ssh_keys:
            fingerprints:
            - "b0:64:61:b7:03:d2:89:49:66:80:04:01:97:b6:cc:fe"
        # attach workspace
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add --update curl python3 py3-pip
              pip3 install --upgrade pip
              pip3 install awscli           
              apk add --update ansible # install the dependencies needed for your playbook
        - run:
            name: Configure server
            command: |
              cat .circleci/ansible/inventory.txt
              ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
        # Here's where you will add some code to rollback on failure 
        - destroy-environment:
            workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
  run-migrations:
      docker:
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Install dependencies
            command: |
              sudo apt-get update && sudo apt-get install -y awscli
      # Restore from cache
        - restore_cache:
            keys: [backend-build]              
        - run:
            name: Run migrations
            command: |
              # Your code here
              cd backend
              npm i
              npm run migrations > migrations.txt
        - run:
            name: Send migration results to memstash
            command: |
              cd backend
              if grep "has been executed successfully" migrations.txt 
              then
              MIGRATIONS_APPLIED=1
              else
              MIGRATIONS_APPLIED=0
              fi 
              echo $MIGRATIONS_APPLIED    
              curl -H "Content-Type: text/plain" -H "token: migration_${CIRCLE_WORKFLOW_ID}" --request PUT --data "$MIGRATIONS_APPLIED" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}             
      # Here's where you will add some code to rollback on failure 
        - destroy-environment:
            workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
        - revert-migrations:
            workflowId: "${CIRCLE_WORKFLOW_ID}"

  deploy-frontend:
    docker:
      - image: amazon/aws-cli:2.0.6
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]              
      - run:
          name: Get backend url and deploy
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm i
            npm run build  
            aws s3 cp ./dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID}"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
          - "b0:64:61:b7:03:d2:89:49:66:80:04:01:97:b6:cc:fe"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli        
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Deploy backend
          command: |
            cat \<< EOF > ~/project/backend/.env
            TYPEORM_CONNECTION=$TYPEORM_CONNECTION
            TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR
            TYPEORM_ENTITIES=$TYPEORM_ENTITIES
            TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS
            TYPEORM_HOST=$TYPEORM_HOST
            TYPEORM_PORT=$TYPEORM_PORT
            TYPEORM_USERNAME=$TYPEORM_USERNAME
            TYPEORM_PASSWORD=$TYPEORM_PASSWORD
            TYPEORM_DATABASE=$TYPEORM_DATABASE
            EOF
            # your code here
            tar -zcvf backend.tar.gz backend
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID}"

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Get backend url and smoke test
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID})
            echo $BACKEND_IP
            curl -s http://$BACKEND_IP:3030/api/status
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      # Here's where you will add some code to rollback on failure 
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:2.0.6
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
                --stack-name "udapeoplecloudfront" \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID}"    

cleanup:
    docker:
      - image: amazon/aws-cli:2.0.6
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" 
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive                           
            fi
                                                         
workflows:
  default:
    jobs:
      - deploy-infrastructure:
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]          