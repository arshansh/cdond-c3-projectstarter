version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflowId:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack \
              --stack-name "frontend-stack-<< parameters.workflowId >>"
            aws cloudformation delete-stack \
              --stack-name "backend-stack-<< parameters.workflowId >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here  
      workflowId:
        type: string            
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: migration_<< parameters.workflowId >>" --request GET https://api.memstash.io/values/migration_<< parameters.workflowId >>)
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            #  Add revert code here. You can find this in the Getting Started section.
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end test
          command: |
            cd frontend
            npm i
            npm run test 
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
          # Your job code here
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end audit
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical 
                

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: back-end audit
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical 
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:2.0.6
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID} \
                --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: save backend url to memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filter "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --query "Reservations[*].Instances[*].[PublicIpAddress]" \
              --output text)
            echo $BACKEND_IP
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
                --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID})
            echo $BACKEND_IP
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run: yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID}"

  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        # Checkout code from git
        - checkout
        # Add ssh keys with fingerprint
        - add_ssh_keys:
            fingerprints:
            - "b0:64:61:b7:03:d2:89:49:66:80:04:01:97:b6:cc:fe"
        # attach workspace
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible # install the dependencies needed for your playbook
              pip install awscli
        - run:
            name: Configure server
            command: |
              cat .circleci/ansible/inventory.txt
              ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
        # Here's where you will add some code to rollback on failure 
        - destroy-environment:
            workflowId: "${CIRCLE_WORKFLOW_ID}"
  run-migrations:
      docker:
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Install dependencies
            command: |
              sudo apt-get update && sudo apt-get install -y awscli
        - run:
            name: Run migrations
            command: |
              # Your code here
              cd backend
              npm i
              MIGRATIONS_RESULT= $(npm run migrations)
              echo $MIGRATIONS_RESULT
              if [ `grep -q "has been executed successfully" MIGRATIONS_RESULT` ]; then
              MIGRATIONS_APPLIED=1
              else
              MIGRATIONS_APPLIED=0
              echo $MIGRATIONS_APPLIED
        - run:
            name: Send migration results to memstash
            command: |
              if(( $MIGRATIONS_APPLIED==1 )); 
              then
              curl -H "Content-Type: text/plain" -H "token: migration_${CIRCLE_WORKFLOW_ID}" --request PUT --data "$MIGRATIONS_APPLIED" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}                
              fi
      # Here's where you will add some code to rollback on failure 
        - destroy-environment:
            workflowId: "${CIRCLE_WORKFLOW_ID}"
        - revert-migrations:
            workflowId: "${CIRCLE_WORKFLOW_ID}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]     
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]                             
          